package crowd_safe_data_analysis;

option java_package = "edu.uci.eecs.crowdsafe.common.data.results";
option java_outer_classname = "Graph";

message Process {
  optional int32 id = 1;
  optional string name = 2;
  repeated Cluster cluster = 3;
  optional ProcessMetadataHistory metadata = 4;
}

message Cluster {
  optional string distribution_name = 1;
  optional int32 node_count = 2;
  optional int32 executable_node_count = 3;
  optional int32 entry_point_count = 4;
  optional int32 callback_entry_count = 9;
  repeated ModuleInstance module = 5;
  repeated UnreachableNode unreachable = 6;
  repeated EdgeTypeCount intra_module_edge_count = 7;
  repeated EdgeTypeCount inter_module_edge_count = 8;
  optional ModuleMetadataHistory metadata = 10;
}

message Module {
  optional string name = 1;
  optional string version = 2;
}

message ModuleInstance {
  optional Module module = 1;
  optional int32 node_count = 2;
  optional ModuleMetadata metadata = 3;
}

message Node {
  optional Module module = 1;
  optional int32 relative_tag = 2;
  optional int32 tag_version = 3;
  optional int64 hashcode = 4;
}

message Edge {
  optional Node from_node = 1;
  optional Node to_node = 2;
  optional EdgeType type = 3;
}

enum EdgeType {
  INDIRECT = 0;
  DIRECT = 1;
  CALL_CONTINUATION = 2;
  EXCEPTION_CONTINUATION = 3;
  UNEXPECTED_RETURN = 4;
  MODULE_ENTRY = 5;
}

message UnreachableNode {
  optional Node node = 1;
  repeated Edge missed_incoming_edge = 2;
  optional bool is_entry_point = 3;
}

message EdgeTypeCount {
  optional EdgeType type = 1;
  optional int32 count = 2;
}

enum EvaluationType {
	UIB_TOTAL = 0;
	UIB_ADMITTED = 1;
	UIB_SUSPICIOUS = 2;
}

message UIBObservation {
	optional EvaluationType type = 1;
	optional int32 instance_count = 2;
	optional int32 traversal_count = 3;
}

message ModuleMetadata {
	repeated UIBObservation total_observed = 1;
	repeated UIBObservation intra_module_observed = 2;
	repeated UIBObservation inter_module_observed = 3;
}

message ModuleMetadataSequence {
	optional bool is_root = 1;
	repeated ModuleMetadata execution = 2;
}

message ModuleMetadataHistory {
	repeated ModuleMetadataSequence sequence = 1;
}

message Interval {
	optional int32 span = 1;
	optional int32 occurences = 2;
	optional int32 max_consecutive = 3;
}

message IntervalGroup {
	optional EvaluationType type = 1;
	repeated Interval interval = 2;
}

message ProcessMetadata {
	repeated IntervalGroup interval_group = 1;
}

message ProcessMetadataSequence {
	optional bool is_root = 1;
	repeated ProcessMetadata execution = 2;
}

message ProcessMetadataHistory {
	repeated ProcessMetadataSequence sequence = 1;
}
